<?php

/**
 * @file
 * Code for the Photo Album content type feature.
 */

include_once 'c4m_content_photoalbum.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_content().
 */
function c4m_content_photoalbum_c4m_og_vocab_info_content() {
  return array(
    'photoalbum' => array(
      'entity_type' => 'node',
      'bundle' => 'photoalbum',
      'vocabularies' => array(
        'c4m_vocab_category',
        'c4m_vocab_tag',
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Verifies user has access to the form.
 * Adds an `Add Photos` button to the `Create Photo album` form.
 */
function c4m_content_photoalbum_form_photoalbum_node_form_alter(&$form, &$form_instance, $form_id) {
  c4m_content_create_group_content_access();

  $form['actions']['add_photos'] = array(
    '#type' => 'submit',
    '#value' => t('Add photos'),
    '#weight' => 7,
    '#submit' => array(
      'node_form_submit',
      'c4m_content_photoalbum_add_photos_submit',
    ),
  );

  // Add author information to the edit photoalbum form.
  c4m_og_add_content_author_options_to_power_users($form);
}

/**
 * Form submission handler for `Create Photo album`.
 *
 * Redirects to the 'Upload New Items' tab when clicking the 'Add photos' button
 * of the `Create Photo album` form.
 */
function c4m_content_photoalbum_add_photos_submit($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/upload';
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_photoalbum_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_photoalbums' => array(
      'type'      => 'photoalbum',
      'context'   => 'group',
      'callback'  => 'c4m_og_group_node_metric',
      'arguments' => array(array('photoalbum')),
      'weight'    => 2,
    ),
  );
}

/**
 * Implements hook_c4m_content_share_fields_info().
 */
function c4m_content_photoalbum_c4m_content_share_fields_info() {
  return array(
    'photoalbum' => array(
      'type',
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_photoalbum_c4m_helper_entity_label_info() {
  return array(
    'photoalbum' => array(
      'article' => t('a'),
      'singular' => t('photo album'),
      'plural' => t('photo albums'),
      'insert action' => t('created a new Photo album'),
      'update action' => t('updated the Photo album'),
      'icon' => 'fa-picture-o',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function c4m_content_photoalbum_menu_alter(&$items) {
  $items['node-gallery/json/item/create/%/%/%']['page callback'] = 'c4m_content_photoalbum_node_gallery_api_json_create_item';
}

/**
 * Prevent from adding photos to a photoalbum without context.
 *
 * @see node_gallery_api_json_create_item()
 */
function c4m_content_photoalbum_node_gallery_api_json_create_item($relationship_type_id, $ngid, $item_type, $token) {
  if (!og_context()) {
    c4m_content_deny_access();
  }

  node_gallery_api_json_create_item($relationship_type_id, $ngid, $item_type, $token);
}

/**
 * Implements hook_entity_type_label_alter().
 */
function c4m_content_photoalbum_entity_type_label_alter(&$variables) {
  if (empty($variables['entity']->type) ||
    'photoalbum' !== $variables['entity']->type) {
    return;
  }
  $variables['label'] .= ' ' . ('added by');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adding the purl to the plupload url so the photos will be created with
 * context.
 */
function c4m_content_photoalbum_form_node_gallery_api_plupload_form_alter(&$form, &$form_state, $form_id, $f) {
  if (!$context = og_context()) {
    return;
  }

  $upload_url = $form['upload']['#plupload_settings']['url'];
  if (empty($upload_url)) {
    return;
  }

  $position = strpos($upload_url, '/node-gallery/json/item/create');
  if ($position === FALSE) {
    return;
  }

  // In case site is hosted on custom path-based domain (www.example.com/foo),
  // cut the path which comes after domain. It will be added by url().
  if ($position != 0) {
    $upload_url = substr($upload_url, $position);
  }

  $url_options = array(
    'absolute' => TRUE,
    'purl' => array(
      'enabled' => TRUE,
      'provider' => 'og_purl|node',
      'id' => $context['gid'],
    ),
  );

  // Generating new url with the purl as prefix.
  $new_url = url($upload_url, $url_options);

  $form['upload']['#plupload_settings']['url'] = $new_url;
}
